<Application x:Class="Jojatekok.MoneroGUI.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:system="clr-namespace:System;assembly=mscorlib"
             xmlns:objects="clr-namespace:Jojatekok.MoneroGUI"
             xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
             StartupUri="Windows\MainWindow.xaml">
    <Application.Resources>
        <ObjectDataProvider x:Key="Resources" ObjectType="{x:Type objects:CultureManager}" MethodName="GetResourceInstance"/>

        <system:String x:Key="StringUnknownValue">?</system:String>

        <objects:ConverterBooleanToString x:Key="ConverterBooleanToStringYesNo" FalseValue="{Binding Path=TextNo, Source={StaticResource Resources}}" TrueValue="{Binding Path=TextYes, Source={StaticResource Resources}}"/>
        <objects:ConverterCoinAtomicValueToDisplayValue x:Key="ConverterCoinAtomicValueToDisplayValue"/>
        <objects:ConverterTransactionTypeToString x:Key="ConverterTransactionTypeToString" UnknownValue="{Binding Path=TransactionTypeUnknown, Source={StaticResource Resources}}" ReceiveValue="{Binding Path=TransactionTypeReceive, Source={StaticResource Resources}}" SendValue="{Binding Path=TransactionTypeSend, Source={StaticResource Resources}}"/>

        <Style x:Key="StyleAnimationSpinner" TargetType="{x:Type Image}">
            <Setter Property="RenderTransformOrigin" Value="0.5 0.5"/>
            <Setter Property="RenderTransform">
                <Setter.Value>
                    <RotateTransform/>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="Visibility" Value="Visible">
                    <Trigger.EnterActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetProperty="RenderTransform.Angle" From="0" To="360" Duration="0:0:4" RepeatBehavior="Forever"/>
                            </Storyboard>
                        </BeginStoryboard>
                    </Trigger.EnterActions>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="StyleMinHeight22" TargetType="{x:Type Control}">
            <Setter Property="MinHeight" Value="22"/>
        </Style>

        <Style x:Key="StyleValidatableControl" TargetType="{x:Type Control}" BasedOn="{StaticResource StyleMinHeight22}">
            <Style.Triggers>
                <Trigger Property="Validation.HasError" Value="True">
                    <Setter Property="Background" Value="{x:Static objects:StaticObjects.BrushBackgroundError}"/>
                </Trigger>
            </Style.Triggers>

            <Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
        </Style>

        <Style TargetType="{x:Type Window}">
            <Setter Property="RenderOptions.EdgeMode" Value="Aliased"/>
        </Style>

        <Style TargetType="{x:Type TextBlock}">
            <Style.Triggers>
                <Trigger Property="Validation.HasError" Value="True">
                    <Setter Property="Foreground" Value="{x:Static objects:StaticObjects.BrushForegroundWarning}"/>
                </Trigger>
            </Style.Triggers>

            <Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
        </Style>

        <Style TargetType="{x:Type Button}" BasedOn="{StaticResource StyleMinHeight22}">
            <Setter Property="Padding" Value="5 0"/>
        </Style>
        <Style TargetType="{x:Type xctk:IntegerUpDown}" BasedOn="{StaticResource StyleValidatableControl}">
            <Setter Property="Height" Value="22"/>
            <Setter Property="Padding" Value="0"/>
        </Style>
        <Style TargetType="{x:Type xctk:DoubleUpDown}" BasedOn="{StaticResource StyleValidatableControl}">
            <Setter Property="Height" Value="22"/>
            <Setter Property="Padding" Value="0"/>
        </Style>
        <Style TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource StyleMinHeight22}">
            <Setter Property="VerticalContentAlignment" Value="Center"/>
        </Style>
        <Style TargetType="{x:Type xctk:WatermarkTextBox}" BasedOn="{StaticResource StyleValidatableControl}">
            <Setter Property="Height" Value="22"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
        </Style>

        <Style TargetType="{x:Type TabItem}">
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        </Style>

        <Style TargetType="{x:Type GroupBox}">
            <Setter Property="Padding" Value="0 3 0 0"/>
        </Style>

        <Style TargetType="{x:Type DataGrid}">
            <Setter Property="EnableColumnVirtualization" Value="True"/>
            <Setter Property="EnableRowVirtualization" Value="True"/>

            <Setter Property="AlternatingRowBackground" Value="#00000000"/>

            <Setter Property="VerticalGridLinesBrush" Value="#26000000"/>
            <Setter Property="HorizontalGridLinesBrush" Value="#26000000"/>
        </Style>

        <Style TargetType="{x:Type DataGridColumnHeader}">
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
        </Style>

        <Style TargetType="{x:Type DataGridCell}">
            <Setter Property="Padding" Value="8"/>
            <Setter Property="BorderThickness" Value="0"/>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DataGridCell}">
                        <Border Padding="{TemplateBinding Padding}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="StyleSeparatorVertical" TargetType="{x:Type Separator}" BasedOn="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}">
            <Setter Property="Width" Value="1"/>
            <Setter Property="Margin" Value="0 2"/>
        </Style>

        <Style x:Key="StyleTextBlockAlignedCenter" TargetType="{x:Type TextBlock}">
            <Setter Property="TextAlignment" Value="Center"/>
        </Style>
        <Style x:Key="StyleTextBlockAlignedRight" TargetType="{x:Type TextBlock}">
            <Setter Property="TextAlignment" Value="Right"/>
        </Style>

        <Style x:Key="StyleTextBoxTransparent" TargetType="{x:Type TextBox}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="IsReadOnly" Value="True"/>
            <Setter Property="KeyboardNavigation.IsTabStop" Value="False"/>
            <Setter Property="Padding" Value="-2 0"/>
            <EventSetter Event="PreviewMouseDoubleClick" Handler="StyleTextBoxTransparent_PreviewMouseDoubleClick"/>
            <EventSetter Event="LostFocus" Handler="StyleTextBoxTransparent_LostFocus"/>
        </Style>

        <Style x:Key="StyleDoubleUpDownCoinAmount" TargetType="{x:Type xctk:DoubleUpDown}" BasedOn="{StaticResource {x:Type xctk:DoubleUpDown}}">
            <Setter Property="FormatString" Value="{x:Static objects:StaticObjects.StringFormatCoinDisplayValue}"/>
            <Setter Property="Minimum" Value="0"/>
            <Setter Property="Maximum" Value="18446744.0737095"/>
            <Setter Property="Increment" Value="0.001"/>
        </Style>

        <Style x:Key="StyleButtonPaddingWide" TargetType="{x:Type Button}" BasedOn="{StaticResource StyleMinHeight22}">
            <Setter Property="Padding" Value="10 0"/>
        </Style>

        <Style x:Key="StyleImagePictogram" TargetType="{x:Type Image}">
            <Setter Property="Height" Value="14"/>
        </Style>

        <Style x:Key="StyleListBoxItemSelectionHidden" TargetType="{x:Type ListBoxItem}">
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Application.Resources>
</Application>
